const allergens = {

  scorecard: {
    1: "eggs",
    2: "peanuts",
    4: "shellfish",
    8: "strawberries",
    16: "tomatoes",
    32: "chocolate",
    64: "pollen",
    128: "cats"
  },

  getKeys: function(){

    // const keys = Object.keys( this.scorecard ).reverse();
    // // console.log(keys);
    //
    // option2 = keys.map(function( num ){
    //
    //   return parseInt( num );
    //
    // });
    //
    // console.log(option2);

    option3 = Object.keys( this.scorecard ).map( Number ).reverse();

    // console.log(option3);

    return option3;
  },

  getList: function( score ){

    const keys = this.getKeys();
    let returnArr = [];

    for ( let i = 0; i < keys.length; i++ ){

      // console.log( keys[i] );
      if ( score >= keys[i] ){

        returnArr.push( this.scorecard[ keys[i] ] );
        score -= keys[i];
        // console.log(this.scorecard[ keys[i] ]);
      }

    }

    // console.log(`returnArr = ${ returnArr }`);
    return returnArr;

  },

  list: function( score ){

    // console.log(score);
    let allergyList = this.getList( score );
    console.log( allergyList );

    if ( allergyList.length > 0 ){
      console.log( `You are allergic to: ${ allergyList.join( ', ' ) }.` );
    } else {
      console.log( `No allergies!` );
    }

  }



};

// allergens.getKeys();
// allergens.getList( 34 );
allergens.list( 34 );
allergens.list( 0 );



// -----------------------------------------------------------------------------------
//                              ALTERNATIVE FACTORY METHOD
// -----------------------------------------------------------------------------------

const allergyCheck = function( score ){


  this.allergens = {
    1: "eggs",
    2: "peanuts",
    4: "shellfish",
    8: "strawberries",
    16: "tomatoes",
    32: "chocolate",
    64: "pollen",
    128: "cats"
  };

  this.allergies = [];

// -----------------------------------------------------------------------------------

  // Rather than using a for ... in loop, we can use Object methods to strip our key values.
  // From there, we convert all those keys to numbers, and flip our array so we can easily iterate backwards through it.

  const allergyList = Object.keys( this.allergens ).map( Number ).reverse();

// -----------------------------------------------------------------------------------


  // If our score is higher than a key value, we are allergic.
  // Push matching values to our allergens array.
  // Subtract that key value from our score (input) otherwise we get a list of ALL values less than that input

  for( let i = 0; allergyList.length > i; i++ ){
    if( score >= allergyList[ i ] ){
      this.allergies.push( this.allergens[ allergyList[ i ] ] );
      score -= allergyList[ i ];
    };
  };

// -----------------------------------------------------------------------------------

  // A ternary operatoris like a very short if/else statement.
  // It takes a condition, if that condition is true, it runs the first command. If not, the second.
  // They can be hard to read, so they are best left to returning single values, not big blocks (though they can be put across multiple lines).

  // conditionIsTrue ? doThis() : notThis()

  this.allergicTo = function( input ){
    this.allergies.indexOf( input ) >= 0 ? console.log( "Allergic to " + input + "." ) : console.log( "Not allergic to " + input + "." );
  };
}; // end function


// Using the key word new, I can save all the information generated by my program.
// Anything in my function preceeded by <this> will be returned as an accessible attribute of that function.
const myAllergies = new allergyCheck( 34 );

console.log( myAllergies.allergies );
myAllergies.allergicTo( "peanuts" );
myAllergies.allergicTo( "cats" );
